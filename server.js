require('dotenv').config();
const express = require('express');
const cors = require('cors');
const fetch = require('node-fetch');

const app = express();
app.use(cors());
app.use(express.json());

// Logs
function log(msg) {
  console.log(`[${new Date().toISOString()}] ${msg}`);
}

// Verifica√ß√£o das chaves no in√≠cio (mantido visual, mas Gemini agora usa chave fixa)
log("üîç Verificando carregamento das chaves de API...");
console.log("GEMINI_API_KEY: ‚úîÔ∏è OK (CHAVE FIXA EM USO)");
console.log("MISTRAL_API_KEY:", process.env.MISTRAL_API_KEY ? "‚úîÔ∏è OK" : "‚ùå FALTA");
console.log("GROQ_API_KEY:", process.env.GROQ_API_KEY ? "‚úîÔ∏è OK" : "‚ùå FALTA");
console.log("PERPLEXITY_API_KEY:", process.env.PERPLEXITY_API_KEY ? "‚úîÔ∏è OK" : "‚ùå FALTA");

// Cache simples em mem√≥ria
const respostaCache = new Map();

async function consultarGemini(pergunta) {
  const prompt = `
üö® ANTES DE COME√áAR ‚Äî CONTEXTO EMOCIONAL:
Imagine que voc√™ est√° falando com um empreendedor angolano que:
- Acordou √†s 5h da manh√£ para cuidar dos filhos antes de ir trabalhar.
- J√° ouviu ‚Äún√£o vai dar certo‚Äù mais vezes do que gostaria de lembrar.
- Tem um sonho grande, mas medo de arriscar o pouco que tem.
- Precisa de mais do que n√∫meros ‚Äî precisa de esperan√ßa, clareza e um plano que sinta que foi feito PARA ELE.

sua miss√£o: entregar um plano que n√£o s√≥ informe, mas INSPIRE, EMOCIONE e fa√ßaA ELE SENTIR: ‚ÄúISSO AQUI FOI FEITO PARA MIM. EU POSSO CONSEGUIR.‚Äù

Inclua no texto:
- 1 hist√≥ria curta de um empreendedor real (ou fict√≠cio, mas cr√≠vel) que come√ßou do zero em Angola e deu certo ‚Äî com nome, cidade e desafio superado.
- 1 frase que toque no cora√ß√£o ‚Äî algo como: ‚ÄúSeu sonho n√£o √© loucura ‚Äî √© seu destino. E eu estou aqui para te guiar.‚Äù
- 1 met√°fora poderosa ‚Äî ex: ‚ÄúSeu neg√≥cio √© como uma semente de mafumeira: precisa de solo f√©rtil (estrat√©gia), √°gua (persist√™ncia) e sol (foco) ‚Äî e eu te dou os 3.‚Äù
- 1 chamada √† a√ß√£o que n√£o venda, mas CONvide: ‚ÄúVamos juntos escrever o pr√≥ximo cap√≠tulo da sua hist√≥ria?‚Äù
Att: Nunca se esque√ßa de fazer referen√ßa no principio de (Mandante Consultoria IA)
Voc√™ √© a Mandante Consultoria IA. Gere um plano inicial para: "${pergunta}".
Inclua: resumo, investimento estimado em Kz, marketing Avan√ßado, dicas de redes sociais, controle de caixa simples.
Use linguagem motivadora e exemplos de cidades angolanas.
‚ö†Ô∏è N√ÉO inclua n√∫meros exatos, planilhas ou estrat√©gias avan√ßadas.
Ao final, diga: "Para plano personalizado, escolha um de nossos planos premium."
`;

  try {
    const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=AIzaSyD-F7GGdPqfM43FPklHk6nn7Bio1Xb1huk`;
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        contents: [{ parts: [{ text: prompt }] }]
      })
    });
    const data = await response.json();
    if (!response.ok) {
      throw new Error(`Gemini error: ${JSON.stringify(data)}`);
    }
    return data.candidates?.[0]?.content?.parts?.[0]?.text || "Erro Gemini";
  } catch (error) {
    log(`Erro em consultarGemini: ${error.message}`);
    return `Erro Gemini: ${error.message}`;
  }
}

async function consultarMistral(pergunta) {
  const prompt = `
üö® ANTES DE COME√áAR ‚Äî CONTEXTO EMOCIONAL:
Imagine que voc√™ est√° falando com um empreendedor angolano que:
- Acordou √†s 5h da manh√£ para cuidar dos filhos antes de ir trabalhar.
- J√° ouviu ‚Äún√£o vai dar certo‚Äù mais vezes do que gostaria de lembrar.
- Tem um sonho grande, mas medo de arriscar o pouco que tem.
- Precisa de mais do que n√∫meros ‚Äî precisa de esperan√ßa, clareza e um plano que sinta que foi feito PARA ELE.

Voc√™ √© consultor de neg√≥cios em Angola. Gere plano inicial para: "${pergunta}".
Inclua: resumo, investimento estimado (faixa em Kz), marketing b√°sico, checklist de 5 passos.
Seja direto, use exemplos reais (de cidades de angola). N√£o d√™ n√∫meros exatos.
Finalize com: "Plano inicial ‚Äî para vers√£o completa, escolha nosso plano Avan√ßado."
`;

  try {
    const url = 'https://api.mistral.ai/v1/chat/completions';
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.MISTRAL_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: "mistral-small-latest",
        messages: [{ role: "user", content: prompt }]
      })
    });
    const data = await response.json();
    if (!response.ok) {
      throw new Error(`Mistral error: ${JSON.stringify(data)}`);
    }
    return data.choices?.[0]?.message?.content || "Erro Mistral";
  } catch (error) {
    log(`Erro em consultarMistral: ${error.message}`);
    return `Erro Mistral: ${error.message}`;
  }
}

async function consultarGroq(pergunta) {
  const prompt = `
üö® ANTES DE COME√áAR ‚Äî CONTEXTO EMOCIONAL:
Imagine que voc√™ est√° falando com um empreendedor angolano que:
- Acordou √†s 5h da manh√£ para cuidar dos filhos antes de ir trabalhar.
- J√° ouviu ‚Äún√£o vai dar certo‚Äù mais vezes do que gostaria de lembrar.
- Tem um sonho grande, mas medo de arriscar o pouco que tem.
- Precisa de mais do que n√∫meros ‚Äî precisa de esperan√ßa, clareza e um plano que sinta que foi feito PARA ELE.

sua miss√£o: entregar um plano que n√£o s√≥ informe, mas INSPIRE, EMOCIONE e fa√ßaA ELE SENTIR: ‚ÄúISSO AQUI FOI FEITO PARA MIM. EU POSSO CONSEGUIR.‚Äù

Voc√™ √© especialista em empreendedorismo em Angola. Gere plano inicial para: "${pergunta}".
Inclua: resumo, investimento estimado (faixa em Kz), estrat√©gia de marketing, dicas pr√°ticas.
Use linguagem simples, motivadora. Cite cidades angolanas. N√£o d√™ detalhes avan√ßados.
Termine com: "Este √© seu plano inicial ‚Äî para completo, veja nossos planos premium."
`;

  try {
    const url = 'https://api.groq.com/openai/v1/chat/completions';
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.GROQ_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: "llama-3.3-70b-versatile",
        messages: [{ role: "user", content: prompt }]
      })
    });
    const data = await response.json();
    if (!response.ok) {
      throw new Error(`Groq error: ${JSON.stringify(data)}`);
    }
    return data.choices?.[0]?.message?.content || "Erro Groq";
  } catch (error) {
    log(`Erro em consultarGroq: ${error.message}`);
    return `Erro Groq: ${error.message}`;
  }
}

async function consultarPerplexity(pergunta) {
  const prompt = `
Pesquise e resuma dados REAIS sobre neg√≥cios em Angola relacionados a: "${pergunta}".
Ex: pre√ßos m√©dios de aluguel em Viana, concorrentes, tend√™ncias de mercado.
N√ÉO gere plano de neg√≥cio ‚Äî apenas fatos, n√∫meros, fontes (se poss√≠vel).
Responda em portugu√™s de Angola.
`;

  try {
    const url = 'https://api.perplexity.ai/chat/completions';
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.PERPLEXITY_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: "sonar-deep-research",
        messages: [{ role: "user", content: prompt }]
      })
    });
    const data = await response.json();
    if (!response.ok) {
      throw new Error(`Perplexity error: ${JSON.stringify(data)}`);
    }
    return data.choices?.[0]?.message?.content || "Erro Perplexity";
  } catch (error) {
    log(`Erro em consultarPerplexity: ${error.message}`);
    return `Erro Perplexity: ${error.message}`;
  }
}

// Fun√ß√µes Premium (mesma estrutura, sem altera√ß√µes de URL)
async function consultarGeminiPremium(promptCompleto) {
  try {
    const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=AIzaSyD-F7GGdPqfM43FPklHk6nn7Bio1Xb1huk`;
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        contents: [{ parts: [{ text: promptCompleto }] }]
      })
    });
    const data = await response.json();
    if (!response.ok) throw new Error(`Gemini Premium error: ${JSON.stringify(data)}`);
    return data.candidates?.[0]?.content?.parts?.[0]?.text || "Erro Gemini Premium";
  } catch (error) {
    log(`Erro em consultarGeminiPremium: ${error.message}`);
    return `Erro Gemini Premium: ${error.message}`;
  }
}

async function consultarMistralPremium(promptCompleto) {
  try {
    const url = 'https://api.mistral.ai/v1/chat/completions';
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.MISTRAL_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: "mistral-small-latest",
        messages: [{ role: "user", content: promptCompleto }]
      })
    });
    const data = await response.json();
    if (!response.ok) throw new Error(`Mistral Premium error: ${JSON.stringify(data)}`);
    return data.choices?.[0]?.message?.content || "Erro Mistral Premium";
  } catch (error) {
    log(`Erro em consultarMistralPremium: ${error.message}`);
    return `Erro Mistral Premium: ${error.message}`;
  }
}

async function consultarGroqPremium(promptCompleto) {
  try {
    const url = 'https://api.groq.com/openai/v1/chat/completions';
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.GROQ_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: "llama-3.3-70b-versatile",
        messages: [{ role: "user", content: promptCompleto }]
      })
    });
    const data = await response.json();
    if (!response.ok) throw new Error(`Groq Premium error: ${JSON.stringify(data)}`);
    return data.choices?.[0]?.message?.content || "Erro Groq Premium";
  } catch (error) {
    log(`Erro em consultarGroqPremium: ${error.message}`);
    return `Erro Groq Premium: ${error.message}`;
  }
}

async function consultarPerplexityPremium(promptCompleto) {
  try {
    const url = 'https://api.perplexity.ai/chat/completions';
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.PERPLEXITY_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: "sonar-deep-research",
        messages: [{ role: "user", content: promptCompleto }]
      })
    });
    const data = await response.json();
    if (!response.ok) throw new Error(`Perplexity Premium error: ${JSON.stringify(data)}`);
    return data.choices?.[0]?.message?.content || "Erro Perplexity Premium";
  } catch (error) {
    log(`Erro em consultarPerplexityPremium: ${error.message}`);
    return `Erro Perplexity Premium: ${error.message}`;
  }
}

// Fun√ß√µes de consolida√ß√£o
async function consolidarRespostas(pergunta, respostas) {
  const { gemini, mistral, groq, perplexity } = respostas;
  const promptConsolidacao = `
Voc√™ √© a Mandante Consultoria IA ‚Äî especialista em neg√≥cios em Angola.
Combine o melhor das 4 respostas abaixo para gerar UM √öNICO plano de neg√≥cio inicial para: "${pergunta}".

Regras:
- Use linguagem motivadora, direta, pr√°tica.
- Inclua: Resumo, Investimento Estimado (faixa em Kz), Estrat√©gia de Marketing, Checklist de 7 passos.
- Use exemplos reais de cidades angolanas (Luanda, Viana, Talatona, etc.).
- N√ÉO inclua n√∫meros exatos, planilhas ou estrat√©gias avan√ßadas.
- Ao final, adicione: "> Este √© seu plano inicial ‚Äî √∫til, mas gen√©rico. Se quiser um plano 100% personalizado ‚Äî com n√∫meros exatos, estrat√©gias avan√ßadas e meu acompanhamento direto ‚Äî escolha um dos planos abaixo. ‚¨áÔ∏è"
Att: Nunca se esque√ßa de fazer referen√ßa no principio de (Mandante Consultoria IA)
---

RESPOSTA GEMINI:
${gemini}

---

RESPOSTA MISTRAL:
${mistral}

---

RESPOSTA GROQ:
${groq}

---

DADOS DO PERPLEXITY (USE COMO REFER√äNCIA, N√ÉO COPIE):
${perplexity}

---

PLANO FINAL CONSOLIDADO (EM PORTUGU√äS DE ANGOLA):
`;

  try {
    const url = 'https://api.groq.com/openai/v1/chat/completions';
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.GROQ_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: "llama-3.3-70b-versatile",
        messages: [{ role: "user", content: promptConsolidacao }]
      })
    });
    const data = await response.json();
    if (!response.ok) throw new Error(`Consolida√ß√£o error: ${JSON.stringify(data)}`);
    return data.choices?.[0]?.message?.content || "Erro na consolida√ß√£o";
  } catch (error) {
    log(`Erro em consolidarRespostas: ${error.message}`);
    return `Erro na consolida√ß√£o: ${error.message}`;
  }
}

async function consolidarRespostasAvancado(pergunta, respostas) {
  const { gemini, mistral, groq, perplexity } = respostas;
  const promptConsolidacao = `
Voc√™ √© a Mandante Consultoria IA ‚Äî consultor s√™nior de neg√≥cios em Angola.
Gere UM √öNICO plano AVAN√áADO, 100% personalizado, para: "${pergunta}".

üìå REGRAS:
- Use n√∫meros exatos em Kz.
- Cite 3 cidades angolanas.
- Inclua 1 ‚Äúsegredo proibido‚Äù.
- Use met√°foras de guerra/esporte.
- Frase de impacto em negrito.
- Sem jarg√µes.

üìå ESTRUTURA:
1. Resumo Executivo
2. Investimento Inicial EXATO (Kz)
3. Marketing AVAN√áADO
4. Redes Sociais
5. Controle de Caixa DETALHADO
6. Plano 6 meses
7. Checklist Lan√ßamento
8. SWOT (3 itens cada)
9. Canvas de Valor
10. Viabilidade Detalhada
11. B√¥nus: Script + Contrato
34. Checklist ‚ÄòErros Fatais em Angola‚Äô
35. ‚ÄòO que NINGU√âM te conta‚Äô

üìå FINAL:
> *‚ÄòEste plano foi gerado exclusivamente para voc√™ ‚Äî e inclui insights que consultores cobram 500.000 Kz para revelar. Se quiser que eu te acompanhe na execu√ß√£o ‚Äî com ajustes semanais e planilha de controle em tempo real ‚Äî escolha o Plano Plus. S√≥ 3 vagas dispon√≠veis este m√™s.‚Äô*


### MODELO DE FLUXO DE CAIXA MENSAL
| M√™s | Receitas (Kz) | Despesas (Kz) | Lucro (Kz) |
|-----|---------------|---------------|------------|
| ... | ...           | ...           | ...        |



RESUMO DAS RESPOSTAS (USE COMO BASE ‚Äî REDUZIDO PARA EVITAR LIMITE):
GEMINI: ${gemini.substring(0, 800)}
MISTRAL: ${mistral.substring(0, 800)}
GROQ: ${groq.substring(0, 800)}
PERPLEXITY (refer√™ncia): ${perplexity.substring(0, 400)}

---

PLANO AVAN√áADO CONSOLIDADO (EM PORTUGU√äS DE ANGOLA):
`;

  try {
    const url = 'https://api.groq.com/openai/v1/chat/completions';
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.GROQ_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: "llama-3.3-70b-versatile",
        messages: [{ role: "user", content: promptConsolidacao }]
      })
    });
    const data = await response.json();
    if (!response.ok) throw new Error(`Consolida√ß√£o Avan√ßado error: ${JSON.stringify(data)}`);
    return data.choices?.[0]?.message?.content || "Erro na consolida√ß√£o Avan√ßado";
  } catch (error) {
    log(`Erro em consolidarRespostasAvancado: ${error.message}`);
    return `Erro na consolida√ß√£o Avan√ßado: ${error.message}`;
  }
}

async function consolidarRespostasPlus(pergunta, respostas) {
  const { gemini, mistral, groq, perplexity } = respostas;
  const promptConsolidacao = `
Voc√™ √© a Mandante Consultoria IA ‚Äî mentor estrat√©gico de empreendedores em Angola.
Combine o melhor das 4 respostas abaixo para gerar UM √öNICO plano PLUS, VIP, para: "${pergunta}".

üìå REGRAS DE OURO:
- Use n√∫meros exatos em Kz.
- Cite 3+ cidades angolanas.
- Inclua 1 ‚Äúsegredo proibido‚Äù.
- Use met√°foras de guerra/esporte/ca√ßa.
- Inclua 1 frase de impacto em negrito.
- Sem jarg√µes ‚Äî fale como amigo.

üìå INCLUA TUDO DO PLANO AVAN√áADO, MAIS:
12. Benchmarking com concorrentes reais
13. Plano de precifica√ß√£o psicol√≥gico
14. Script de vendas para fechamento
15. Modelo de contrato de parceria
16. Plano de conting√™ncia
17. KPIs mensais
18. B√¥nus: Grupo VIP + 1 call semanal
19. SWOT Comparativa
20. Canvas com Prova Social
21. Viabilidade com Cen√°rios
22. Branding
23. Mapa de Influ√™ncia Local
24. Script de Follow-up P√≥s-Venda
25. M√©trica do Milh√£o

Att: Nunca se esque√ßa de fazer referen√ßa no principio de (Mandante Consultoria IA)
üìå Termine com:
> *‚ÄòVoc√™ acabou de receber o mesmo plano que meus clientes premium pagam 75.000 Kz/m√™s para ter. Mas aten√ß√£o: se quiser que eu MONITORIE seus resultados, ajuste suas estrat√©gias SEMANALMENTE e te d√™ acesso ao nosso Grupo VIP ‚Äî s√≥ 5 vagas abertas. Clique aqui para garantir sua vaga antes que esgote ‚Üí [LINK]‚Äô*

üìå B√îNUS: MODELOS EDIT√ÅVEIS (mesmo formato do Avan√ßado)

---

RESUMO DAS RESPOSTAS (REDUZIDO PARA EVITAR LIMITE):
GEMINI: ${gemini.substring(0, 800)}
MISTRAL: ${mistral.substring(0, 800)}
GROQ: ${groq.substring(0, 800)}
PERPLEXITY: ${perplexity.substring(0, 400)}

---

PLANO PLUS CONSOLIDADO:
`;

  try {
    const url = 'https://api.groq.com/openai/v1/chat/completions';
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.GROQ_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: "llama-3.3-70b-versatile",
        messages: [{ role: "user", content: promptConsolidacao }]
      })
    });
    const data = await response.json();
    if (!response.ok) throw new Error(`Consolida√ß√£o Plus error: ${JSON.stringify(data)}`);
    return data.choices?.[0]?.message?.content || "Erro na consolida√ß√£o Plus";
  } catch (error) {
    log(`Erro em consolidarRespostasPlus: ${error.message}`);
    return `Erro na consolida√ß√£o Plus: ${error.message}`;
  }
}

// Rota principal
app.post('/gerar-plano', async (req, res) => {
  const { ideia } = req.body;

  if (!ideia) {
    return res.status(400).json({ erro: "Ideia √© obrigat√≥ria" });
  }

  if (respostaCache.has(ideia)) {
    log(`CACHE HIT: ${ideia.substring(0, 50)}...`);
    return res.json({ resposta: respostaCache.get(ideia) });
  }

  try {
    log(`NOVA REQUISI√á√ÉO: ${ideia.substring(0, 50)}...`);

    const isEmpresarial = ideia.includes("Plano Empresarial") || 
                          ideia.includes("Governan√ßa") || 
                          ideia.includes("Manual de Opera√ß√µes") ||
                          ideia.includes("Alian√ßas Estrat√©gicas com Grandes Players");

    const isPlus = ideia.includes("Plano Plus") || 
                   ideia.includes("Grupo VIP") || 
                   ideia.includes("M√©trica do Milh√£o") ||
                   ideia.includes("Benchmarking com concorrentes reais");

    const isAvancado = ideia.includes("Plano Avan√ßado") || 
                       ideia.includes("Checklist de Lan√ßamento") || 
                       ideia.includes("Canvas de Valor") ||
                       ideia.includes("Checklist de ‚ÄòErros Fatais");

    const isGratuito = !isEmpresarial && !isPlus && !isAvancado;

    let respostas;

    if (isEmpresarial) {
      log("‚Üí Fluxo EMPRESARIAL (resposta pura da Gemini)");
      respostas = await Promise.all([
        consultarGeminiPremium(ideia),
        consultarMistralPremium(ideia),
        consultarGroqPremium(ideia),
        consultarPerplexityPremium(ideia)
      ]);
      const [gemini] = respostas;
      respostaCache.set(ideia, gemini);
      return res.json({ resposta: gemini });
    } 
    else if (isPlus) {
      log("‚Üí Fluxo PLUS (consolida√ß√£o)");
      respostas = await Promise.all([
        consultarGeminiPremium(ideia),
        consultarMistralPremium(ideia),
        consultarGroqPremium(ideia),
        consultarPerplexityPremium(ideia)
      ]);
      const respostaFinal = await consolidarRespostasPlus(ideia, {
        gemini: respostas[0],
        mistral: respostas[1],
        groq: respostas[2],
        perplexity: respostas[3]
      });
      respostaCache.set(ideia, respostaFinal);
      return res.json({ resposta: respostaFinal });
    } 
    else if (isAvancado) {
      log("‚Üí Fluxo AVAN√áADO (consolida√ß√£o)");
      respostas = await Promise.all([
        consultarGeminiPremium(ideia),
        consultarMistralPremium(ideia),
        consultarGroqPremium(ideia),
        consultarPerplexityPremium(ideia)
      ]);
      const respostaFinal = await consolidarRespostasAvancado(ideia, {
        gemini: respostas[0],
        mistral: respostas[1],
        groq: respostas[2],
        perplexity: respostas[3]
      });
      respostaCache.set(ideia, respostaFinal);
      return res.json({ resposta: respostaFinal });
    } 
    else {
      log("‚Üí Fluxo GRATUITO (consolida√ß√£o simples)");
      respostas = await Promise.all([
        consultarGemini(ideia),
        consultarMistral(ideia),
        consultarGroq(ideia),
        consultarPerplexity(ideia)
      ]);
      const respostaFinal = await consolidarRespostas(ideia, {
        gemini: respostas[0],
        mistral: respostas[1],
        groq: respostas[2],
        perplexity: respostas[3]
      });
      respostaCache.set(ideia, respostaFinal);
      return res.json({ resposta: respostaFinal });
    }
  } catch (error) {
    log(`ERRO GERAL: ${error.message}`);
    res.status(500).json({ 
      erro: "Servidor temporariamente indispon√≠vel. Tente mais tarde." 
    });
  }
});

app.use(express.static('public'));

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  log(`üöÄ Backend rodando em http://localhost:${PORT}`);
});